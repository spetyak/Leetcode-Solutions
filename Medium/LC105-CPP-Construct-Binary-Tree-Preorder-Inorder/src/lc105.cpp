#include <iostream>
#include <vector>

using namespace std;

/*
 * Author: spetyak
 *
 * Runtime: Beats 79.43% of C++ submissions
 * Memory: Beats 43.15% of C++ submissions
 */

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:

    unordered_map<int, int> m; // map used to find roots in inorder list
    int currentIndex; // pointer used to track current subtree root from preorder list

    /*
     * Recursively build a binary tree given a list generated by a preorder traversal and 
     * one generated by an inorder traversal. 
     *
     * @param preorder the list of nodes generated by traversing the tree preorder
     * @param inorder the list of nodes generated by traversing the tree inorder
     * @param leftBound the lower bound of the current subtree window being considered
     * @param rightBound the upper bound of the current subtree window being considered
     * 
     * @return The binary tree which produced the given preorder and inorder traversal lists.
     */
    TreeNode* recursiveBuildTree(vector<int>& preorder, vector<int>& inorder, int leftBound, int rightBound) {

        // if the left and right bound have crossed each other, there are no children
        if (rightBound <= leftBound)
        {
            return nullptr;
        }
        
        int currentRootPos = m[preorder[currentIndex]]; // find current root index in inorder list

        TreeNode* root = new TreeNode(preorder[currentIndex]); // make a new tree node
        currentIndex++; // advance preorder pointer to next root

        // build subtrees of current root node
        root->left = recursiveBuildTree(preorder, inorder, leftBound, currentRootPos); 
        root->right = recursiveBuildTree(preorder, inorder, currentRootPos+1, rightBound); 

        return root;

    }

    /*
     * Given two integer arrays preorder and inorder where preorder is the preorder traversal 
     * of a binary tree and inorder is the inorder traversal of the same tree, 
     * construct and return the binary tree.
     *
     * @param preorder the list of nodes generated by traversing the tree preorder
     * @param inorder the list of nodes generated by traversing the tree inorder
     * 
     * @return The binary tree which produced the given preorder and inorder traversal lists.
     */
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {

        // note where each inorder node value appears in the inorder list
        for (int i = 0; i < inorder.size(); i++)
        {
            m[inorder[i]] = i;
        }

        currentIndex = 0; // initialize preorder pointer to first element

        TreeNode* t = recursiveBuildTree(preorder, inorder, 0, inorder.size()); // create the tree

        return t;
        
    }

};

int main() {

    Solution s;

    // kinda pointless to go through trouble here to demonstrate output as it is
    // just the same list as the input

    return 0;

}